import sys
import os
import csv
import fiona
from collections import OrderedDict, defaultdict
from shapely.geometry import mapping, shape, MultiLineString, LineString, Point

# Collect debug information for data generated by cvts.py

from vtra.utils import load_config

def process_raw_gps_file_into_shapefile(path, target_folder, target_filename):
    with open(path, 'rt') as source:
        geojson = []
        reader = csv.reader(source)

        next(reader)

        for row in reader:
            geojson.append({
                'type': "Feature",
                'geometry': {
                    "type": "Point",
                    "coordinates": [float(row[2]), float(row[3])]
                },
                'properties': {
                    "time": row[8]
                }
            })

    write_shapefile(geojson, target_folder, target_filename)

def process_redused_gps_file_into_shapefile(path, target_folder, target_filename):
    with open(path, 'rt') as source:
        geojson = []
        reader = csv.reader(source)

        next(reader)

        for row in reader:
            geojson.append({
                'type': "Feature",
                'geometry': {
                    "type": "Point",
                    "coordinates": [float(row[0]), float(row[1])]
                },
                'properties': {
                    "time": row[2]
                }
            })

    write_shapefile(geojson, target_folder, target_filename)

def process_gps_in_buffered_linestring(path, target_folder, target_filename, buffer):
    with open(path, 'rt') as source:
        geojson = []
        reader = csv.reader(source, quoting=csv.QUOTE_NONNUMERIC)

        next(reader)

        geom = LineString([Point(row[0], row[1]) for row in reader])

        geojson.append({
            'type': "Feature",
            'geometry': mapping(geom.buffer(buffer)),
            'properties': {
            }
        })

    write_shapefile(geojson, target_folder, target_filename)

def process_routes_into_linestrings(road_network, path, target_folder, target_filename):

    road_lut = defaultdict(dict)
    for road in road_network:
        road_lut[road['properties']['G_ID']] = shape(road['geometry'])

    with open(os.path.join(path), 'rt') as source:
        geojson = []
        reader = csv.reader(source, quoting=csv.QUOTE_NONNUMERIC)

        geoms = []
        for row in reader:
            geoms.append(road_lut[row[0]])

        geojson.append({
            'type': "Feature",
            'geometry': mapping(MultiLineString(geoms)),
            'properties': {
                "id": target_filename,
            }
        })

    write_shapefile(geojson, target_folder, target_filename)

def read_shapefile(path, file):
    with fiona.open(os.path.join(path, file), 'r') as source:
        return [entry for entry in source]

def write_shapefile(data, folder, filename):

    # Translate props to Fiona sink schema
    prop_schema = []
    for name, value in data[0]['properties'].items():
        fiona_prop_type = next((fiona_type for fiona_type, python_type in fiona.FIELD_TYPES_MAP.items() if python_type == type(value)), None)
        prop_schema.append((name, fiona_prop_type))

    new_prop_schema = []
    for prop in prop_schema:
        if prop[1] == None:
            new_prop_schema.append((prop[0], 'str'))
        else:
            new_prop_schema.append(prop)

    sink_driver = 'ESRI Shapefile'
    sink_crs = {'init': 'epsg:4326'}
    sink_schema = {
        'geometry': data[0]['geometry']['type'],
        'properties': OrderedDict(new_prop_schema)
    }

    # Create path
    directory = os.path.join(folder)
    if not os.path.exists(directory):
        os.makedirs(directory)

    # Write all elements to output file
    with fiona.open(os.path.join(directory, filename), 'w', driver=sink_driver, crs=sink_crs, schema=sink_schema) as sink:
        [sink.write(feature) for feature in data]

if __name__ == "__main__":

    DEBUG_FILE = os.path.join('51F14657.csv')

    data_root = load_config()['paths']['data']

    dir_raw_cvts = os.path.join(data_root, 'raw', 'cvts', '20170801')
    dir_raw_roads = os.path.join(data_root, 'raw', 'cvts', 'Roads', 'national_roads')
    dir_inter_reduse = os.path.join(data_root, 'intermediate', 'reduse')
    dir_inter_clip = os.path.join(data_root, 'intermediate', 'clip')
    dir_results_routes = os.path.join(data_root, 'results', 'routes')
    dir_results_traffic_count = os.path.join(data_root, 'results', 'traffic_count')

    dir_debug = os.path.join(data_root, 'debug')

    # Get original dataset
    process_raw_gps_file_into_shapefile(os.path.join(dir_raw_cvts, DEBUG_FILE), dir_debug, 'raw.shp')

    # Get reduced dataset
    process_redused_gps_file_into_shapefile(os.path.join(dir_inter_reduse, DEBUG_FILE), dir_debug, 'reduse.shp')

    process_gps_in_buffered_linestring(os.path.join(dir_inter_reduse, DEBUG_FILE), dir_debug, 'route_buffer.shp', 0.002)

    # Get route
    # Read road network in memory
    print('Read road network')
    geojson_road_network = read_shapefile(dir_raw_roads, 'national_network_edges.shp')

    print('Process routes into LineStrings')
    process_routes_into_linestrings(geojson_road_network, os.path.join(dir_results_routes, DEBUG_FILE), dir_debug, 'route.shp')
